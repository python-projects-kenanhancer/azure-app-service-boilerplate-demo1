# Core project metadata and dependencies
[project]
name = "ovo_kenan_boilerplate_demo1"
version = "0.1.0"
description = "Azure App Service Python Application"
authors = [
    { name = "Kenan Hancer", email = "kenan.hancer@ovo.com" }
]
readme = "README.md"
requires-python = ">=3.12.7"
dependencies = [
    "flask>=3.0.0",
    "azure-keyvault-secrets>=4.7.0",
    "azure-storage-blob>=12.19.0",
    "injector>=0.22.0",
    "pydantic>=2.10.5",
    "pydantic-settings>=2.7.1",
    "python-dotenv>=1.0.1",
    "pyyaml>=6.0.2",
    "azure-identity>=1.24.0",
    "google-cloud-secret-manager>=2.24.0",
    "google-cloud-storage>=3.2.0",
    "cloudevents>=1.12.0",
    "flask>=3.1.1",
    "uvicorn>=0.35.0",
    "psutil>=5.9.0",
    "pyjwt>=2.8.0",
    "redis>=6.4.0",
    "sqlalchemy>=2.0.0",
    "psycopg2-binary>=2.9.0",
]

# Development dependencies group
[dependency-groups]
dev = [
    "pytest>=8.2.0",
    "pytest-cov>=5.0.0",
    "pytest-xdist>=3.6.1",
    "mypy>=1.10.0",
    "ruff>=0.12.8",
    "pre-commit>=4.3.0",
    "mdformat>=0.7.22",
]

[project.scripts]
setup = "scripts.setup:setup"
cleanup = "scripts.cleanup:cleanup"

# Build system configuration
[build-system]
requires = ["hatchling"] # Build dependencies
build-backend = "hatchling.build" # Build backend to use

# Hatch-specific build configuration
[tool.hatch.build.targets.wheel]
packages = ["src"] # Source code location

# -----------------------------
# Linting configuration (Ruff)
# -----------------------------
[tool.ruff]
line-length = 130

# Rules & fixes (Ruff >= 0.4.0 supports the [tool.ruff.lint] table)
[tool.ruff.lint]
select = ["F", "E", "W", "C90", "I"]
fixable = ["ALL"]
ignore = [
    "E501", # Line too long (handled by formatter)
    "F403", # Wildcard imports (from module import *)
    "F405", # Import may be undefined, or defined in star imports
    "F821", # Undefined name (for reveal_type)
    "D100", # Missing docstring in public module
    "D101", # Missing docstring in public class
    "D102", # Missing docstring in public method
    "D103", # Missing docstring in public function
    "D104", # Missing docstring in public package
    "D105", # Missing docstring in magic method
    "D106", # Missing docstring in public nested class
    "D107", # Missing docstring in __init__
]
exclude = [
    ".git",
    ".venv",
    "__pycache__",
    "build",
    "dist",
    "migrations",
    ".pytest_cache",
    ".vscode",
    ".idea",
    ".tox",
    ".eggs",
    ".hg",
    ".mypy_cache",
    ".nox",
]

[tool.ruff.lint.isort]
known-first-party = ["hapie_api_sdk"]


# -----------------------------
# Static typing (mypy)
# -----------------------------
[tool.mypy]
python_version = "3.13"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
#mypy_path = ["src"]  # Uncomment if needed for module resolution

# -----------------------------
# Pytest configuration
# -----------------------------
[tool.pytest.ini_options]
pythonpath = ["./src"]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--cov=src/hapie_api_sdk",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "-n 4",
]
norecursedirs = [".venv", ".pytest_cache", "__pycache__", ".vscode"]

# -----------------------------
# Coverage configuration
# -----------------------------
[tool.coverage.run]
source = ["src/hapie_api_sdk"]
omit = ["*/tests/*", "*/test_*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == '__main__':",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
